plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'net.nemerosa.versioning' version '2.8.2'
}

jar.enabled = false

subprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    group 'io.github.funcfoo'
    version '1.0.0-SNAPSHOT'

    ext {
        isNeedSign = project.hasProperty('signing.gnupg.keyName')
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    }

    test {
        useJUnitPlatform()
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(8)
        }
    }

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
        options.encoding = 'UTF-8'
    }

    compileJava.options*.compilerArgs = [
        '-Xlint:all', '-Xlint:-processing'
    ]

    // Copy LICENSE
    tasks.withType(Jar) {
        from(project.rootDir) {
            include 'LICENSE'
            into 'META-INF'
        }
    }


    // MANIFEST.MF
    jar {
        manifest {
            attributes(
                'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString(),
                'Built-By': 'travis',
                'Build-At': Instant.now(),
                'Built-OS': "${System.properties['os.name']}",
                'Build-Revision': versioning.info.commit,
                'Specification-Title': project.name,
                'Specification-Version': project.version,
                'Specification-Vendor': 'Chace Yang',
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'Chace Yang'
            )
        }
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier.set('sources')
    }

    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier.set('javadoc')
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = 'jake'
                    description = 'A distributed unique ID generator inspired by snowflake and sonyflake'
                    url = 'https://github.com/funcfoo/jake'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'http://www.opensource.org/licenses/mit-license.php'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = 'Chace'
                            name = 'Chace Yang'
                            email = 'chaceshift@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/funcfoo/jake.git'
                        developerConnection = 'scm:git:ssh@github.com:funcfoo/jake.git'
                        url = 'https://github.com/funcfoo/jake'
                    }
                }
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
            }
        }

        repositories {
            maven {
                credentials {
                    username System.getenv('OSSRH_USER')
                    password System.getenv('OSSRH_PASS')
                }
                def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            }
        }

        tasks.withType(Sign) {
            onlyIf { project.ext.isNeedSign }
        }

        signing {
            useGpgCmd()
            sign publishing.publications.mavenJava
        }
    }
}